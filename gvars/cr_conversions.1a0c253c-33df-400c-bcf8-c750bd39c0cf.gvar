# CR conversions
def cr_to_float(cr_string):
    # Mapping CR strings to their corresponding float values
    cr_map = {
        '1/8': 0.125,
        '1/4': 0.25,
        '1/2': 0.5,
        '0': 0.0
    }
    
    # Check if the string is in the mapping dictionary
    if cr_string in cr_map:
        return cr_map[cr_string]
    
    # For integer CR values from 1 to 29
    try:
        cr_value = int(cr_string)
        if 1 <= cr_value:
            return float(cr_value)
    except ValueError:
        pass
    
    # Handle values not mapped
    raise ValueError("Invalid CR string. Must be a valid CR (e.g., '1/8', '1/4', '1/2', '0', '1-30').")

def float_to_cr(cr_value):
    # CR values and their corresponding strings
    cr_map = {
        0.125: '1/8',
        0.25: '1/4',
        0.5: '1/2',
        0.0: '0'
    }
    
    # Check if the value is in the mapping dictionary
    if cr_value in cr_map:
        return cr_map[cr_value]
    
    # For integer CR values >= 1 to
    if 1 <= cr_value and cr_value == int(cr_value):
        return str(int(cr_value))
    
    # Handle values not mapped
    raise ValueError("Invalid CR value. Must be a valid CR (e.g., 0.125, 0.25, 0.5, 1-30).")

cr_value_to_xp_dictionary = {
	0: 0,
	0.125: 25,
	0.25: 50,
	0.5: 100,
	1: 200,
	2: 450,
	3: 700,
	4: 1100,
	5: 1800,
	6: 2300,
	7: 2900,
	8: 3900,
	9: 5000,
	10: 5900,
	11: 7200,
	12: 8400,
	13: 10000,
	14: 11500,
	15: 13000,
	16: 15000,
	17: 18000,
	18: 20000,
	19: 22000,
	20: 25000,
	21: 33000,
	22: 41000,
	23: 50000,
	24: 62000,
	25: 75000,
	26: 90000,
	27: 105000,
	28: 120000,
	29: 135000,
	30: 155000
}

def cr_to_xp(cr_value):
	return cr_value_to_xp_dictionary[cr_value]

level_to_easy_encounter_xp = {
    1: 25,
    2: 50,	
    3: 75,	
    4: 125,
    5: 250,
    6: 300,
    7: 350,
    8: 450,
    9: 550,
    10: 600,
    11: 800,
    12: 1000,
    13: 1100,
    14: 1250,
    15: 1400,
    16: 1600,
    17: 2000,
    18: 2100,
    19: 2400,
    20: 2800,
}

def player_levels_to_xp_threshold(levels):
    # Sum the XP thresholds for each level in the input list
    total_xp = sum(level_to_easy_encounter_xp[level] for level in levels)
    return total_xp 